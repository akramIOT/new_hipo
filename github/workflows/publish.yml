name: Publish Python Package

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.1.0)'
        required: true
        type: string

jobs:
  publish-package:
    name: Build and Publish Python Package
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for trusted publishing to PyPI
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Update version
      if: github.event_name == 'workflow_dispatch'
      run: |
        # Get the current version from pyproject.toml
        CURRENT_VERSION=$(grep -m 1 'version = ' pyproject.toml | awk -F'"' '{print $2}')
        NEW_VERSION="${{ github.event.inputs.version }}"
        
        echo "Updating version from $CURRENT_VERSION to $NEW_VERSION"
        
        # Update version in pyproject.toml
        sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
        
        # Update version in src/__init__.py
        sed -i "s/__version__ = \"$CURRENT_VERSION\"/__version__ = \"$NEW_VERSION\"/" src/__init__.py
        
        # Commit the version change
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add pyproject.toml src/__init__.py
        git commit -m "Bump version to $NEW_VERSION"
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        git push origin "v$NEW_VERSION"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package with twine
      run: |
        twine check dist/*
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
        verbose: true
    
    - name: Create GitHub Release
      if: github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.event.inputs.version }}
        tag_name: v${{ github.event.inputs.version }}
        files: |
          dist/*.whl
          dist/*.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true