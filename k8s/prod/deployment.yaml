apiVersion: apps/v1
kind: Deployment
metadata:
  name: hipo-api
  namespace: hipo
  labels:
    app: hipo
    component: api
    environment: production
spec:
  replicas: 4
  selector:
    matchLabels:
      app: hipo
      component: api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: hipo
        component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "5000"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - hipo
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: hipo-api
        image: akramsheriff/hipo:latest  # Will be replaced by CI/CD
        imagePullPolicy: Always
        args: ["serve"]
        ports:
        - containerPort: 5000
        resources:
          requests:
            cpu: "2"
            memory: "4Gi"
          limits:
            cpu: "4"
            memory: "8Gi"
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "WARNING"
        - name: CLOUD_PROVIDERS
          value: "aws,gcp,azure"
        - name: GOMAXPROCS
          value: "4"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: secrets-volume
          mountPath: /app/secrets
          readOnly: true
        - name: weights-volume
          mountPath: /app/weights_cache
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        startupProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 20
          periodSeconds: 10
          failureThreshold: 30
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      volumes:
      - name: config-volume
        configMap:
          name: hipo-config
      - name: secrets-volume
        secret:
          secretName: hipo-secrets
      - name: weights-volume
        persistentVolumeClaim:
          claimName: hipo-weights-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hipo-ui
  namespace: hipo
  labels:
    app: hipo
    component: ui
    environment: production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: hipo
      component: ui
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: hipo
        component: ui
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - hipo
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: hipo-ui
        image: akramsheriff/hipo:latest  # Will be replaced by CI/CD
        imagePullPolicy: Always
        args: ["ui"]
        ports:
        - containerPort: 8501
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
        env:
        - name: ENVIRONMENT
          value: "production"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        livenessProbe:
          httpGet:
            path: /
            port: 8501
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      volumes:
      - name: config-volume
        configMap:
          name: hipo-config
---
apiVersion: v1
kind: Service
metadata:
  name: hipo-api
  namespace: hipo
  labels:
    app: hipo
    component: api
    environment: production
spec:
  selector:
    app: hipo
    component: api
  ports:
  - port: 5000
    targetPort: 5000
    name: http
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: hipo-ui
  namespace: hipo
  labels:
    app: hipo
    component: ui
    environment: production
spec:
  selector:
    app: hipo
    component: ui
  ports:
  - port: 80
    targetPort: 8501
    name: http
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hipo-ingress
  namespace: hipo
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
spec:
  tls:
  - hosts:
    - hipo.example.com
    - api.hipo.example.com
    secretName: hipo-tls
  rules:
  - host: api.hipo.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: hipo-api
            port:
              number: 5000
  - host: hipo.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: hipo-ui
            port:
              number: 80
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: hipo-weights-pvc
  namespace: hipo
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard