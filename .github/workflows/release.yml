name: Release Pipeline

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper versioning
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov build twine
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        pytest tests/ --cov=src
    
    - name: Build package
      run: |
        python -m build
    
    - name: Store package
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish-pypi:
    name: Publish to PyPI
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: pypi
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download built package
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true

  build-docker:
    name: Build and Push Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          akramsheriff/hipo:latest
          akramsheriff/hipo:${{ steps.get_version.outputs.VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    needs: [publish-pypi, build-docker]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog generation
    
    - name: Generate changelog
      id: generate_changelog
      run: |
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$PREVIOUS_TAG" ]; then
          git log --pretty=format:"* %s (%h)" > CHANGELOG.md
        else
          git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..HEAD > CHANGELOG.md
        fi
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        body: |
          ## Changes
          ${{ steps.generate_changelog.outputs.CHANGELOG }}
          
          ## Docker Image
          ```
          docker pull akramsheriff/hipo:${{ github.ref_name }}
          ```
        files: |
          dist/*.tar.gz
          dist/*.whl
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-prod:
    name: Deploy to Production
    needs: [publish-pypi, build-docker]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Update release version in manifests
      run: |
        sed -i "s/image: akramsheriff\/hipo:.*/image: akramsheriff\/hipo:${{ steps.get_version.outputs.VERSION }}/" k8s/prod/*.yaml
    
    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --name prod-cluster --region us-west-2
        kubectl apply -f k8s/prod/
    
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/hipo-api -n hipo
        kubectl rollout status deployment/hipo-worker -n hipo